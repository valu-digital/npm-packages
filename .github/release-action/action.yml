name: "Publish to npm"
inputs:
  slack_channel:
    description: "Send publish progress to this slack channel"
    required: false
  slack_access_token:
    description: "The slack token"
    required: false
  npm_token:
    description: "npm token"
    required: true
  node_version:
    description: "node.js version"
    required: false
    default: "16.x"
  pnpm_version:
    description: "pnpm version"
    required: false
    default: "7.9.0"
  package:
    description: "package to release"
    required: false
    default: ""
  mode:
    description: "release mode"
    required: false
    default: "stable"
  allowed_users:
    description: |
      Users allowed to release

      Generate collaborators list with:

        gh api /repos/{org}/{repo}/collaborators | jq -r '.[] | .login'

    required: false
    default: ""
runs:
  using: composite
  steps:
    - name: "PR Comment: Set PR_RELEASE, PR_SHA and package name"
      if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '!release') }}
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('PR_RELEASE', "1");

          const pull = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.issue.number
          });

          core.exportVariable('PR_SHA', pull.data.head.sha);

          const pkg = context.payload.comment.body.match(/!release +(.*)/)?.[1];

          if (pkg) {
            console.log(`Package name: ${pkg}`);
            core.exportVariable('pkg', pkg);
          } else {
            core.setFailed(`Cannot find package name from the comment`);
          }

    - name: Check allowed users
      if: ${{ env.PR_RELEASE == '1' }}
      env:
        allowed_users: "${{ inputs.allowed_users }}"
      uses: actions/github-script@v6
      with:
        script: |
          let ok = false;

          const allowedUsers = process.env.allowed_users.split("\n");
          if (allowedUsers.includes(context.actor)) {
            console.log(`User ${context.actor} is allowed to release because in the list.`);
            ok = true;
          }

          if (!ok) {
            const collaborators = await github.rest.repos.listCollaborators({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            if (collaborators.data.some((c) => c.login === context.actor)) {
              console.log(`User ${context.actor} is allowed to release because they are a collaborator.`);
              ok = true;
            }
          }

          if (ok) {
            process.exit(0);
          }

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Sorry @${context.actor}, you are not allowed to release this package.`,
          });

          core.setFailed(`User ${context.actor} is not allowed to release`)

    # https://github.com/actions/runner/issues/520
    - name: Enable slack messaging
      shell: bash
      run: |
        if [ "${{ inputs.slack_access_token }}" != "" ]; then
            echo HAS_SLACK=1 >> $GITHUB_ENV
        fi

    - name: Setup slack command
      uses: valu-digital/slack-action@master
      if: ${{ env.HAS_SLACK == '1' }}
      with:
        token: "${{ inputs.slack_access_token }}"
        channel: "${{ inputs.slack_channel }}"

    - name: Notify start
      if: ${{ env.HAS_SLACK == '1' }}
      shell: bash
      run: slack-message "Creating new npm release..."

    - name: Set pkg env
      shell: bash
      run: echo "pkg=${{ inputs.package }}" >> $GITHUB_ENV

    - name: Switch to PR branch
      if: ${{ env.PR_RELEASE == '1' }}
      shell: bash
      run: |
        set -eux
        git checkout $PR_SHA

    - name: Set version enviroment variables
      shell: bash
      run: |
        set -eu

        release_mode=${{ inputs.mode }}

        if [ "$pkg" == "" ]; then
          pkg=$(echo "$GITHUB_REF" | cut -d / -f 4)
        fi

        if [ ! -f "packages/$pkg/package.json" ]; then
          echo "Unknown package $pkg"
          exit 1
        fi

        if [ "$release_mode" == "stable" ]; then
          next_version=${GITHUB_REF##*/}
        else
          next_version=prerelease
        fi


        next_tag="$pkg/v${next_version}"

        npm_name=$pkg

        current_version=0.0.0

        current_version="$(jq -r .version "packages/$pkg/package.json")"
        npm_name="$(jq -r .name "packages/$pkg/package.json")"


        next_tag="$pkg/v${next_version}"

        if [ "$next_version" = "prerelease" ]; then
          sha=$(git rev-parse HEAD)
          next_version="${current_version}-dev.${sha:0:10}"
          # No tag for prereleases
          next_tag=
          release_mode=prerelease
        fi


        prev_tag="$(git describe --abbrev=0 --match "$pkg/v*" || true)"
        prev_version=$(echo "$prev_tag" | sed -E "s/.+v([0-9\.]+)\$/\1/")

        link_ver="$(echo $next_version | tr -cd '[:alnum:]')"
        changelog_link="https://github.com/${GITHUB_REPOSITORY}/blob/${{ github.event.repository.default_branch }}/packages/$pkg/CHANGELOG.md#v${link_ver}"

        if [ "$next_version" = "$prev_version" ]; then
          echo "Cannot release $prev_version again"
          exit 9
        fi

        is_pnpm=0

        if [ -f pnpm-lock.yaml ]; then
          is_pnpm=1
        fi

        if [ -f "packages/$pkg/pnpm-lock.yaml" ]; then
          is_pnpm=1
        fi

        set -x
        echo "pkg=$pkg" >> $GITHUB_ENV
        echo "is_pnpm=$is_pnpm" >> $GITHUB_ENV
        echo "npm_name=$npm_name" >> $GITHUB_ENV
        echo "next_version=$next_version" >> $GITHUB_ENV
        echo "next_tag=$next_tag" >> $GITHUB_ENV
        echo "prev_tag=$prev_tag" >> $GITHUB_ENV
        echo "prev_version=$prev_version" >> $GITHUB_ENV
        echo "release_mode=$release_mode" >> $GITHUB_ENV
        echo "changelog_link=$changelog_link" >> $GITHUB_ENV

    - name: Set version number
      shell: bash
      run: |
        set -eu
        cd "packages/$pkg"

        jq ".version = \"$next_version\"" package.json > tmp.json
        mv tmp.json package.json

    - name: Commit version numbers
      if: ${{ env.release_mode == 'stable' }}
      shell: bash
      run: |
        set -eu
        cd "packages/$pkg"

        git config user.email "action@github.com"
        git config user.name "${{ github.actor }}"
        git add package.json
        git commit -m "$pkg: v${next_version}"
        git tag -a "$next_tag" -m "$pkg v$next_version"

    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: "${{ inputs.node_version }}"

    - name: Setup pnpm
      uses: pnpm/action-setup@v2.0.1
      with:
        version: "${{ inputs.pnpm_version }}"
      if: ${{ env.is_pnpm == '1' }}

    - name: "Install node modules"
      shell: bash
      run: |
        set -eu
        cd "packages/$pkg"

        if [ "$is_pnpm" = "1" ]; then
            pnpm install --frozen-lockfile
        elif [ -f package-lock.json ]; then
            npm ci
        else
            npm install
        fi

    - name: "Build the package"
      shell: bash
      run: |
        set -eu
        cd "packages/$pkg"

        task=build

        if [ "$(jq -r '.scripts."publish-build"' package.json)" != "null" ]; then
            task=publish-build
        fi

        if [ "$is_pnpm" = "1" ]; then
            pnpm run $task
            pnpm run test
        else
            npm run $task
            npm run test
        fi

    - name: Make STABLE release
      shell: bash
      if: ${{ env.release_mode == 'stable' }}
      run: |
        set -eu
        cd "packages/$pkg"

        echo "//registry.npmjs.org/:_authToken=${{ inputs.npm_token }}" > "$HOME/.npmrc"
        npm whoami

        if [ "$is_pnpm" = "1" ]; then
            pnpm publish --access public --no-git-checks
        else
            npm publish --access public
        fi

        rm "$HOME/.npmrc"

        git push origin HEAD:${{ github.event.repository.default_branch }}
        git push origin --tags

    - name: Create Github Release entry for STABLE release
      if: ${{ env.release_mode == 'stable' }}
      with:
        script: |
          let body = `Changelog ${process.env.changelog_link}`;
          body += '\n\n by @${{ github.actor }}n';

          await github.rest.repos.createRelease({
            draft: false,
            body,
            generate_release_notes: false,
            name: process.env.next_tag,
            owner: context.repo.owner,
            prerelease: false,
            repo: context.repo.repo,
            tag_name: process.env.next_tag,
          });

    - name: Notify about STABLE release
      shell: bash
      if: ${{ env.release_mode == 'stable' && env.HAS_SLACK == '1' }}
      run: slack-message "New \`$npm_name\` stable release. See <$changelog_link|Changelog>."$'\n'"Install with \`npm install $npm_name@^${next_version}\`"

    - name: Make PRERELEASE release
      shell: bash
      if: ${{ env.release_mode == 'prerelease' }}
      run: |
        set -eu
        cd "packages/$pkg"

        echo "//registry.npmjs.org/:_authToken=${{ inputs.npm_token }}" > "$HOME/.npmrc"

        if [ "$is_pnpm" = "1" ]; then
            pnpm publish --tag dev --access public --no-git-checks
        else
            npm publish --tag dev --access public
        fi

        rm "$HOME/.npmrc"

    - name: Log install command
      shell: bash
      run: |
        echo
        if [ "$release_mode" = "stable" ]; then
            echo "npm install $npm_name@${next_version}"
        else
            echo "npm install --save-exact $npm_name@${next_version}"
        fi
        echo

    - name: Notify about PRERELEASE release
      shell: bash
      if: ${{  env.release_mode == 'prerelease' && env.HAS_SLACK == '1'}}
      run: slack-message "New \`$npm_name\` prelease."$'\n'"Install with \`npm install --save-exact $npm_name@${next_version}\`"

    - name: Add comment about the release
      uses: actions/github-script@v6
      if: ${{ env.PR_RELEASE == '1' }}
      with:
        script: |
          let body = 'Hey @${{ github.actor }}! I made a prerelease of `${{ env.npm_name }}`\n';

          body += '\n';

          body += 'Version\n';
          body += '```\n';
          body += '${{ env.next_version }}';
          body += '\n```';

          body += '\n';

          body += 'Install with\n';
          body += '```\n';
          body += 'npm install --save-exact ${{ env.npm_name }}@${{ env.next_version }}';
          body += '\n```';

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body
          });

    - name: Restore to original branch
      if: ${{ always() }}
      shell: bash
      run: |
        if [ "${PR_SHA:-}" != "" ]; then
          git switch -
        fi

    - name: Notify about failure
      shell: bash
      if: failure()
      run: slack-message "Failed to make npm release for ${pkg:-} / ${npm_name:-}"

    - name: Comment about failure
      if: ${{ env.PR_RELEASE == '1' && failure() }}
      uses: actions/github-script@v6
      with:
        script: |
          const workflow_url = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Hey @${{ github.actor }}! I failed to make a release. See ${workflow_url}`
          });
